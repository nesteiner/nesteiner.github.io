#+OPTIONS: author:nil ^:{}
#+HUGO_BASE_DIR: ../../ChiniBlogs
#+HUGO_SECTION: posts/2023/01
#+HUGO_CUSTOM_FRONT_MATTER: :toc true
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2023-01-08 Sun 15:09]
#+TITLE: Flutter 局部更新
#+HUGO_TAGS: Flutter
#+HUGO_CATEGORIES: Flutter

* Flutter 局部更新
** StatefulBuilder
#+begin_src dart
  Widget build(BuildContext context) {
    return Column(
      children: [
        buildCheapUpdateWidget(context),
        buildExpensiveUpdateWidget(context)
      ]
    )
  }
#+end_src

在上述代码中，如果调用了 =setState= 更新状态，整个组件会重新 =build= 一遍，届时 =buildExpensiveUpdateWidget= 会
重新调用一遍，这是我们引入局部更新组建
#+begin_src dart
  StatefulBuilder(
    builder: (context, setState) => Widget
  )
#+end_src
更新时用 =builder= 中的 =setState= 即可

正是有了局部更新，我们可以解决在 =Dialog= 中 =setState= 不起作用的问题，详情看 [[https://stackoverflow.com/questions/51962272/how-to-refresh-an-alertdialog-in-flutter][这篇文章]]
** Selector
=Selector= 是另一种状态管理方式 =Provider= 的局部更新方法
在使用 =Consumer= 的时候，如果 =ChangeNotifier= 调用了 =notifyListeners= ，所有监听的 =Consumer= 都会更新，
但是没那个必要，所以我们引入局部更新来避免不必要的更新
#+begin_src dart
  Selector<State, T>(
    selector: (context, state) => state.value,
    builder: (context, value, child) => Widget
  )
#+end_src

注意
目前的理解，需要搭配 =context.read= 使用
