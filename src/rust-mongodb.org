#+OPTIONS: author:nil ^:{}
#+HUGO_BASE_DIR: ../../ChiniBlogs
#+HUGO_SECTION: posts/2023/01
#+HUGO_CUSTOM_FRONT_MATTER: :toc true
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2023-01-01 Sun 12:28]
#+TITLE: Rust Mongodb 简单使用
#+HUGO_TAGS: Mongodb
#+HUGO_CATEGORIES: Rust
* Rust Mongodb
** 开启同步和异步
同步
#+begin_src toml
  mongodb = {version = "2.3.1", features = ["tokio-sync"]}
#+end_src

#+begin_src rust
  use mongodb::sync::{Client, Collection};
#+end_src
异步
#+begin_src toml
  mongodb = {version = "2.3.1"}
#+end_src

#+begin_src rust
  use mongodb::{Client, Collection};
#+end_src
** 连接 Mongodb

#+begin_src rust
  impl Client {
      pub fn with_uri_str(url: impl AsRef<str>) -> Result<Self>
  }
#+end_src

#+begin_src rust
  impl Client {
      pub async fn with_uri_str(url: impl AsRef<str>) -> Result<Self>
  }
#+end_src

** 连接到 database
#+begin_src rust
  impl Client {
      pub fn database(&self, name: &str) -> Database
  }
#+end_src

** 连接到 collection
#+begin_src rust
  impl Database {
      pub fn collection<T>(&self, name: &str) -> Collection<T>
  }
#+end_src

** collection 操作
异步和同步代码就差一个 =await= 操作，这里以同步代码为例
*** find
**** 方法定义
#+begin_src rust
  impl <T> Collection<T> {
      pub fn find(
          &self,
          filter: impl Into<Option<Document>>,
          options: impl Into<Option<FindOptions>>
      ) -> Result<Cursor<T>>
  }
#+end_src

#+begin_src rust
  impl <T> Collection<T> {
      pub fn find_one(
          &self,
          filter: impl Into<Option<Document>>,
          options: impl Into<Option<FindOneOptions>>
      )
  } -> Result<Option<T>>
#+end_src
**** [builder] FindOptions 与 FindOneOptions
#+begin_src rust
  pub struct FindOptions {
      pub allow_disk_use: Option<bool>,
      pub allow_partial_results: Option<bool>,
      pub batch_size: Option<u32>,
      pub comment: Option<String>,
      pub cursor_type: Option<CursorType>,
      pub hint: Option<Hint>,
      pub limit: Option<i64>,
      pub max: Option<Document>,
      pub max_await_time: Option<Duration>,
      pub max_scan: Option<u64>,
      pub max_time: Option<Duration>,
      pub min: Option<Document>,
      pub no_cursor_timeout: Option<bool>,
      pub projection: Option<Document>,
      pub read_concern: Option<ReadConcern>,
      pub return_key: Option<bool>,
      pub selection_criteria: Option<SelectionCriteria>,
      pub show_record_id: Option<bool>,
      pub skip: Option<u64>,
      pub sort: Option<Document>,
      pub collation: Option<Collation>,
      pub let_vars: Option<Document>,
  }
#+end_src

#+begin_src rust
  pub struct FindOneOptions {
      pub allow_partial_results: Option<bool>,
      pub collation: Option<Collation>,
      pub comment: Option<String>,
      pub hint: Option<Hint>,
      pub max: Option<Document>,
      pub max_scan: Option<u64>,
      pub max_time: Option<Duration>,
      pub min: Option<Document>,
      pub projection: Option<Document>,
      pub read_concern: Option<ReadConcern>,
      pub return_key: Option<bool>,
      pub selection_criteria: Option<SelectionCriteria>,
      pub show_record_id: Option<bool>,
      pub skip: Option<u64>,
      pub sort: Option<Document>,
      pub let_vars: Option<Document>,
  }
#+end_src
**** 返回类型 Cursor
***** 同步
#+begin_src rust
  if let Ok(cursor) = collection.find(None, None) {
      for result in cursor {
          println!("{:?}", result);
      }
  }
#+end_src
***** 异步
#+begin_src rust
  use futures::stream::{StreamExt, TryStreamExt};

  let mut cursor = collection.find(None, None).await?;
  while let Some(doc) = cursor.next().await {
      println!("{}", doc?);
  }

  let mut cursor = collection.find(None, None).await?;
  while let Some(doc) = cursor.try_next().await? {
      println!("{}", doc);
  }
#+end_src
*** insert
**** 方法定义
#+begin_src rust
  impl <T> Collection<T> {
      pub fn insert_many(
          &self,
          docs: impl IntoIterator<Item = impl Borrow<T>>,
          options: impl Into<Option<InsertManyOptions>>
      ) -> Result<InsertManyResult>
  }
#+end_src

#+begin_src rust
  impl <T> Collection<T> {
      pub fn insert_one(
          &self,
          doc: impl Borrow<T>,
          options: impl Into<Option<InsertOneOptions>>
      ) -> Result<InsertOneResult>
  }
#+end_src
**** [builder] InsertManyOptions 与 InsertOneOptions
#+begin_src rust
  pub struct InsertManyOptions {
      pub bypass_document_validation: Option<bool>,
      pub ordered: Option<bool>,
      pub write_concern: Option<WriteConcern>,
  }
#+end_src

#+begin_src rust
  pub struct InsertOneOptions {
      pub bypass_document_validation: Option<bool>,
      pub write_concern: Option<WriteConcern>,
  }
#+end_src
**** 返回类型 InsertManyResult 与 InsertOneResult
#+begin_src rust
  pub struct InsertManyResult {
      pub inserted_ids: HashMap<usize, Bson>,
  }
#+end_src

#+begin_src rust
  pub struct InsertOneResult {
      pub inserted_id: Bson,
  }
#+end_src

*** delete
**** 方法定义
#+begin_src rust
  impl <T> Collection<T> {
      pub fn delete_many(
          &self,
          query: Document,
          options: impl Into<Option<DeleteOptions>>
      ) -> Result<DeleteResult>
  }
#+end_src

#+begin_src rust
  impl <T> Collection<T> {
      pub fn delete_one(
          &self,
          query: Document,
          options: impl Into<Option<DeleteOptions>>
      ) -> Result<DeleteResult>
  }
#+end_src
**** [builder] DeleteOptions
#+begin_src rust
  pub struct DeleteOptions {
      pub collation: Option<Collation>,
      pub write_concern: Option<WriteConcern>,
      pub hint: Option<Hint>,
      pub let_vars: Option<Document>,
  }
#+end_src
**** 返回类型 DeleteResult
#+begin_src rust
  pub struct DeleteResult {
      pub deleted_count: u64,
  }
#+end_src

*** update
**** 方法定义
#+begin_src rust
  impl <T> Collection<T> {
      pub fn update_many(
          &self,
          query: Document,
          update: impl Into<UpdateModifications>,
          options: impl Into<Option<UpdateOptions>>
      ) -> Result<UpdateResult>
  }
#+end_src

#+begin_src rust
  impl <T> Collection<T> {
      pub fn update_one(
          &self,
          query: Document,
          update: impl Into<UpdateModifications>,
          options: impl Into<Option<UpdateOptions>>
      ) -> Result<UpdateResult>
  }
#+end_src
**** [builder] UpdateModifications
Both *Document* and *Vec<Document>* implement Into<UpdateModifications>, so either can be passed in place of constructing the enum case
**** 返回类型 UpdateResult
#+begin_src rust
  pub struct UpdateResult {
      pub matched_count: u64,
      pub modified_count: u64,
      pub upserted_id: Option<Bson>,
  }
#+end_src

*** replace
**** 方法定义
#+begin_src rust
  impl <T> Collection<T> {
      pub fn replace_one(
          &self,
          query: Document,
          replacement: impl Borrow<T>,
          options: impl Into<Option<ReplaceOptioins>>
      ) -> Result<UpdateResult>
  }
#+end_src
**** [builder] ReplaceOptions
#+begin_src rust
  pub struct ReplaceOptions {
      pub bypass_document_validation: Option<bool>,
      pub upsert: Option<bool>,
      pub collation: Option<Collation>,
      pub hint: Option<Hint>,
      pub write_concern: Option<WriteConcern>,
      pub let_vars: Option<Document>,
  }
#+end_src
** Document 类型
*Document* 类型使用 =doc!= 宏来构造，写的时候参考 =json= 就行了
#+begin_src rust
  let doc = doc! {"title": {"$set": "hello"}};
  let doc = doc! {"age": {"$eq": 1}};
#+end_src
