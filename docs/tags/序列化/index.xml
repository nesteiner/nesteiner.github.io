<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>序列化 - Tag - My New Hugo Site</title>
        <link>http://example.org/tags/%E5%BA%8F%E5%88%97%E5%8C%96/</link>
        <description>序列化 - Tag - My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 30 Dec 2022 17:59:00 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/%E5%BA%8F%E5%88%97%E5%8C%96/" rel="self" type="application/rss+xml" /><item>
    <title>Serde Json 简单使用</title>
    <link>http://example.org/posts/2022/12/rust-serde-json/</link>
    <pubDate>Fri, 30 Dec 2022 17:59:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/12/rust-serde-json/</guid>
    <description><![CDATA[Serde Json 添加依赖 cargo add serde --features derive cargo add serde_json cargo add serde_derive 结构体的序列化与反序列化 use serde::{Serialize, Deserialize}; #[derive(Serialize, Deserialize, Debug)] struct Point { x: i32, y: i32, } fn main() { let point = Point {x: 1, y: 2}; let json: String = serde_json::to_string(&amp;point).unwrap(); println!(&#34;{}&#34;, json); let point: Point = serde_json::from_str(&amp;json).unwrap(); println!(&#34;{:#?}&#34;, point); } 枚举的序列化与反序列化 第一种枚举类型 参照结构体的序列化和反序列化，如果对一个枚举进行序列化，我们发现 use serde::{Serialize, Deserialize}; #[derive(Debug, Serialize, Deserialize)] enum Week { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday, } fn main() { let json: String = serde_json::to_string(&amp;Week::Friday).]]></description>
</item>
</channel>
</rss>
