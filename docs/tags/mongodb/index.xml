<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Mongodb - Tag - My New Hugo Site</title>
        <link>http://example.org/tags/mongodb/</link>
        <description>Mongodb - Tag - My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 05 Jan 2023 00:19:00 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/mongodb/" rel="self" type="application/rss+xml" /><item>
    <title>SpringBoot with MongodbRepository</title>
    <link>http://example.org/posts/2023/01/spring-data-mongodb/</link>
    <pubDate>Thu, 05 Jan 2023 00:19:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2023/01/spring-data-mongodb/</guid>
    <description><![CDATA[Spring with MongodbRepository 简单使用 这篇笔记参考自 这篇文章 定义数据类型 class Product( val id: String, val name: String, val price: Int ) 我们可以 手动定义对象存储的集合位置 @Document(collection = &#34;products&#34;) class Product( ) 手动定义对象的主键 class Product( @MongoId val id: String ) 定义 Repository @Repository interface ProductRepository: MongoRepository&lt;Product, String&gt; { fun findAllByNameLike(name: String): List&lt;Product&gt; fun findById(id: String): Product? fun existsByName(name: String): Bool } 继承自 MongoRepository 的接口类与 JPA 相似，定义好方法即可， CRUD 方法也与之类似 排序 @Repository interface ProductRepository: MongoRepository&lt;Product, String&gt; { fun findAllByNameLike(name: String, sort: Sort): List&lt;Product&gt; } val sort = Sort.]]></description>
</item>
<item>
    <title>Rust Mongodb 简单使用</title>
    <link>http://example.org/posts/2023/01/rust-mongodb/</link>
    <pubDate>Sun, 01 Jan 2023 12:28:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2023/01/rust-mongodb/</guid>
    <description><![CDATA[Rust Mongodb 开启同步和异步 同步 mongodb = {version = &#34;2.3.1&#34;, features = [&#34;tokio-sync&#34;]} use mongodb::sync::{Client, Collection}; 异步 mongodb = {version = &#34;2.3.1&#34;} use mongodb::{Client, Collection}; 连接 Mongodb impl Client { pub fn with_uri_str(url: impl AsRef&lt;str&gt;) -&gt; Result&lt;Self&gt; } impl Client { pub async fn with_uri_str(url: impl AsRef&lt;str&gt;) -&gt; Result&lt;Self&gt; } 连接到 database impl Client { pub fn database(&amp;self, name: &amp;str) -&gt; Database } 连接到 collection impl Database { pub fn collection&lt;T&gt;(&amp;self, name: &amp;str) -&gt; Collection&lt;T&gt; } collection 操作 异步和同步代码就差一个 await 操作，这里以同步代码为例 find 方法定义]]></description>
</item>
</channel>
</rss>
