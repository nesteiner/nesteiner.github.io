<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - My New Hugo Site</title>
        <link>http://example.org/posts/</link>
        <description>All Posts | My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 28 Jul 2022 14:23:00 &#43;0800</lastBuildDate><atom:link href="http://example.org/posts/" rel="self" type="application/rss+xml" /><item>
    <title>New York City Airbnb Open Data Analysis</title>
    <link>http://example.org/posts/2022/07/newyork/</link>
    <pubDate>Thu, 28 Jul 2022 14:23:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/newyork/</guid>
    <description><![CDATA[New York City Airbnb Open Data Analysis 以下流程参考自 https://www.kaggle.com/code/chirag9073/airbnb-analysis-visualization-and-prediction 导入库 using MLJFlux, Flux, MLJ, DataFrames, CSV, StatsBase using WordCloud 加载数据 origindata = CSV.read(&#34;data/newyork-city-airbnb-open-data/AB_NYC_2019.csv&#34;, DataFrame) 观察数据 你可以像教程那样 也可以，像我一样，用 excel 打开 csv 文件 我写了一个表格，记录我观察到的结果 column missing count type type coerce fill/drop id 0 Int Count =&gt; Continuous None name 16 String? Multiclass Drop host_id 0 Int Count =&gt; Continuous None host_name 21 String? Multiclass Drop neighbourhood_group 0 String15 Multiclass =&gt; Count =&gt; Continuous None neighbourhood 0 String31 Multiclass =&gt; Count =&gt; Continuous None latitude 0 Float64 Continuous None longitude 0 Float64 Continuous =&gt; Multiclass =&gt; Continuous None room_type 0 String15 Multiclass =&gt; Count =&gt; Continuous None price 0 Int Count =&gt; Continuous None minimum_nights 0 Int Count =&gt; Continuous None number_of_reviews 0 Int Count =&gt; Continuous None last_review 10052 Date?]]></description>
</item>
<item>
    <title>数据可视化 电影数据分析</title>
    <link>http://example.org/posts/2022/07/movies/</link>
    <pubDate>Thu, 28 Jul 2022 14:23:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/movies/</guid>
    <description><![CDATA[数据可视化 电影数据分析 说明 这次的文章参考自 https://zhuanlan.zhihu.com/p/35453189 提出问题 简单分析制作一部电影时，应考虑哪些客观因素才能使电影成功? 为客户提供有效的数据一句，以便作出更准确 的决策 本次数据分析报告主要围绕一下几点进行分析 问题一：电影类型如何随时间发生变化？ 电影数量上的对比 电影收入的对比 问题二：影响电影收入的客观因素有哪些？ 这个不会，先放一放 问题三：两家电影公司Universal Pictures 和 Paramount Pictures之间的对比。 电影发行数量上的对比 电影产生的利润对比 问题四：改编电影和原创电影之间的对比。 电影发行数量上的对比 电影产生的利润对比 理解数据 重点关注的变量有： imdb_id IMDB 标识号 popularity 在 Movie Database 上的相对页面查看次数 budget 预算（美元） revenue 收入（美元） original_title 电影名称 cast 演员列表，按 | 分隔，最多 5 名演员 homepage 电影首页的 URL director 导演列表，按 | 分隔，最多 5 名导演 tagline 电影的标语 keywords 与电影相关的关键字，按 | 分隔，最多 5 个关键字 overview 剧情摘要 runtime 电影时长 genres 风格列表，按 | 分隔，最多 5 种风格 production_companies 制作公司列表，按 | 分隔，最多 5 家公司 release_date 首次上映日期 vote_count 评分次数 vote_average 平均评分 release_year 发行年份 budget_adj 根据通货膨胀调整的预算（2010 年，美元） revenue_adj 根据通货膨胀调整的收入（2010 年，美元） 导入数据 using MLJFlux, Flux, MLJ, DataFrames, CSV, StatsBase, Dates import JSON creditsdata = CSV.]]></description>
</item>
<item>
    <title>Julia 简单爬虫编写</title>
    <link>http://example.org/posts/2022/07/julia-spider/</link>
    <pubDate>Sat, 23 Jul 2022 17:58:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/julia-spider/</guid>
    <description><![CDATA[项目介绍 我想试试 do everything in Julia，所以这里我简单写了一个爬虫，来爬取涩图 https://github.com/nesteiner/WebCrawl.jl 安装包 以下的包先安装好 HTTP 用于获取 HTTP Gumbo 用于解析 HTTP Cascadia 使用 CSS Selector 解析 HTTP URIs 用于uri 的解析 我们要爬取的 url 在这里 未成年人请在父母陪同下点击 工具函数 Julia 原有的 joinpath 不能满足我们的需求，比如我们要合并这两个 url https://example.com/hello /hello/1 合并后的结果应该是 https://example.com/hello/1 ，可 joinpath 合并后的结果是 /hello/1 这里我们使用 URIs 中的 resolvereference 来简单写一个 urljoin function urljoin(base::AbstractString, ref::AbstractString) return string( resolvereference(base, ref) ) end 整体流程 首先我们定义一个全局的 CONFIG 对象，来设置一些参数，比如 代理地址 请求头 Cookie User-Agent 我们再定义解析函数 parse ，由于处理方式与 scrapy 不太一样，没有必要将接口设计成一样 parse(startpage::String, dict::Dict{String, T}) where T &lt;: Any 由于出现分页，我们需要开始递归解析页面，我们从 startpage 开始解析， dict 存储一些额外参数，如 存储的文件夹位置 图片的名称 调用解析函数时，我们还会处理图片下载请求 pipeline(image::String, path::String) 他将从 image 下载资源，存储到 path 中 详细代码 参考 test/runtests.]]></description>
</item>
<item>
    <title>Android 数据绑定简单使用</title>
    <link>http://example.org/posts/2022/07/android-databinding/</link>
    <pubDate>Sat, 02 Jul 2022 14:39:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/android-databinding/</guid>
    <description><![CDATA[Android 数据绑定简单使用 这次我们要替代获取控件的方法，以前是使用 findViewById 一个一个拿到控件 现在我们需要直接在 layout 中注入数据对象，我们还要直接通过 id 访问到控件 数据绑定 启用数据绑定 在 build.gradle 中添加如下代码 android { dataBinding { enable = true } } 即可开启数据绑定 修改布局文件 先看 Vue 中的数据绑定是怎样操作的 &lt;template&gt; &lt;div class=&#34;container&#34;&gt; &lt;span&gt; {{data}} &lt;/span&gt; &lt;/div&gt; &lt;/template&gt; &lt;script lang=&#34;ts&#34; setup&gt; const data = &#39;hello&#39; &lt;/script&gt; 在 XML 中 layout 类似 template 使用 data 标签声明数据 假设有数据类型 User public class User { public String name; public String password; public User(String name, String password) { this.]]></description>
</item>
<item>
    <title>Android 通信简单应用</title>
    <link>http://example.org/posts/2022/07/android-communication/</link>
    <pubDate>Sat, 02 Jul 2022 14:39:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/android-communication/</guid>
    <description><![CDATA[Activity 之间通信 从一个 Activity 跳转到另一个 Activity 时，可以携带一些数据进去，这个就是 Activity 之间的通信 跳转到 Activity 之后可以响应通信，不过需要发起端调用 startActivityForResult ，接收端调用 setResult 这种通信方法我不能类比到组件之间的通信，组件之间通信都是单向数据流，这个是 双向数据流 原来的通信方法 通信发起端 跳转需要借助 Intent 对象，指定来源的上下文和目标的类，调用 startActivity 即可 Intent intent = new Intent(this, TargetClass.class); startActivity(intent) 如果需要携带数据，创建一个 Bundle 对象绑定到 Intent 即可 Intent intent = new Intent(this, TargetClass.class); Bundle bundle = new Bundle(); bundle.putString(&#34;message&#34;, &#34;Hello World&#34;); intent.putExtras(bundle); startActivity(intent); 其实也可以不用 Bundle ，直接给 Intent 来添加 通信接收端 跳转到接收端后，使用 getIntent 来获取对端的 Intent 对象，并查看绑定的数据 Intent intent = getIntent(); Bundle bundle = intent.]]></description>
</item>
<item>
    <title>Android Room 简单使用</title>
    <link>http://example.org/posts/2022/07/android-room/</link>
    <pubDate>Sat, 02 Jul 2022 14:38:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/android-room/</guid>
    <description><![CDATA[Android Room 简单使用 说明 这次没有用内置的 SQLite 库，而是直接使用了 Room ，原因之一是 SQLite 在创建数据库的时候出错了，排查不到哪一步出错 二是这个 Room 与 Flutter 中的 floor 框架非常相似，可以无缝迁移 添加依赖 在 src/build.gradle 中 dependencies { def room_version = &#34;2.4.2&#34; implementation &#34;androidx.room:room-runtime:$room_version&#34; annotationProcessor &#34;androidx.room:room-compiler:$room_version&#34; } 配置类 Room 包含三个主要组件 数据库类 数据实体 数据访问对象(DAO) 他们的定义如下 数据实体 @Entity public class User { @PrimaryKey public int uid; @ColumnInfo(name = &#34;first_name&#34;) public String firstName; @ColumnInfo(name = &#34;last_name&#34;) public String lastName; } 数据访问对象 @Dao public interface UserDao { @Query(&#34;SELECT * FROM user&#34;) List&lt;User&gt; getAll(); @Query(&#34;SELECT * FROM user WHERE uid IN (:userIds)&#34;) List&lt;User&gt; loadAllByIds(int[] userIds); @Query(&#34;SELECT * FROM user WHERE first_name LIKE :first AND &#34; + &#34;last_name LIKE :last LIMIT 1&#34;) User findByName(String first, String last); @Insert void insertAll(User.]]></description>
</item>
<item>
    <title>Android ToolBar 简单使用</title>
    <link>http://example.org/posts/2022/07/android-toolbar/</link>
    <pubDate>Sat, 02 Jul 2022 14:38:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/android-toolbar/</guid>
    <description><![CDATA[Android ToolBar 简单使用 介绍 按照效果图，从左到右分别是 导航栏图标 App Logo 标题 子标题 自定义控件 (Clock) ActionMenu 接下来我们制作这个页面 activity 布局文件 在 layout/activity_toolbar.xml 中 &lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;LinearLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; android:layout_width=&#34;match_parent&#34; android:layout_height=&#34;match_parent&#34; android:orientation=&#34;vertical&#34;&gt; &lt;android.support.v7.widget.Toolbar android:id=&#34;@+id/toolbar&#34; android:layout_width=&#34;match_parent&#34; android:layout_height=&#34;wrap_content&#34; android:background=&#34;@color/color_0176da&#34;&gt; &lt;!--自定义控件--&gt; &lt;TextView android:layout_width=&#34;wrap_content&#34; android:layout_height=&#34;wrap_content&#34; android:text=&#34;Clock&#34; /&gt; &lt;/android.support.v7.widget.Toolbar&gt; &lt;/LinearLayout&gt; menu 菜单文件 在 menu/toolbar_menu.xml 中，这里记得新建 menu 资源文件夹 &lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;menu xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; xmlns:app=&#34;http://schemas.android.com/apk/res-auto&#34;&gt; &lt;item android:id=&#34;@id/action_search&#34; android:icon=&#34;@mipmap/ic_search&#34; android:title=&#34;@string/menu_search&#34; app:showAsAction=&#34;ifRoom&#34; /&gt; &lt;item android:id=&#34;@id/action_notification&#34; android:icon=&#34;@mipmap/ic_notifications&#34; android:title=&#34;@string/menu_notifications&#34; app:showAsAction=&#34;ifRoom&#34; /&gt; &lt;item android:id=&#34;@+id/action_item1&#34; android:title=&#34;@string/item_01&#34; app:showAsAction=&#34;never&#34; /&gt; &lt;item android:id=&#34;@+id/action_item2&#34; android:title=&#34;@string/item_02&#34; app:showAsAction=&#34;never&#34; /&gt; &lt;/menu&gt; 这里我们通过设置 showAsAction 来确定 menu item 的位置 ifRoom 如果工具栏由剩余空间，那么显示在工具栏中 never 显示在菜单弹出框中 设置 activity 的 ToolbarActivity 在 ToolbarActivity.]]></description>
</item>
<item>
    <title>Android 样式与主题</title>
    <link>http://example.org/posts/2022/07/android-theme/</link>
    <pubDate>Sat, 02 Jul 2022 14:37:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/android-theme/</guid>
    <description><![CDATA[Android 样式与主题 设置样式 假设我们给一个按钮设置样式，在 res/values/style.xml 中 &lt;style name=&#34;BeatBoxButton&#34;&gt; &lt;item name=&#34;android:background&#34;&gt;@color/dark_blue&lt;/item&gt; &lt;/style&gt; 在需要设置的按钮布局中 &lt;Button style=&#34;@style/BeatBoxButton&#34;/&gt; 这样就完成了样式的设置 继承样式 样式支持继承，我们来继承上面的样式，创建一个新的样式 &lt;style name=&#34;BeatBoxButton.Strong&#34;&gt; &lt;item name=&#34;android:textStyle&#34;&gt;bold&lt;/item&gt; &lt;/style&gt; 也可以使用 &lt;style name=&#34;StrongBeatBoxButton&#34; parent=&#34;@style/BeatBoxButton&#34;&gt; &lt;item name=&#34;android:textStyle&#34;&gt;bold&lt;/item&gt; &lt;/style&gt; 使用主题 主题也是一种样式，他必须继承自 Theme 下的主题，这里定义一个 style &lt;style name=&#34;BoxButtonTheme&#34; parent=&#34;Theme.MaterialComponents.DayNight.DarkActionBar&#34;&gt; &lt;item name=&#34;android:background&#34;&gt;@color/black&lt;/item&gt; &lt;item name=&#34;android:textColor&#34;&gt;@color/white&lt;/item&gt; &lt;item name=&#34;android:textStyle&#34;&gt;bold&lt;/item&gt; &lt;/style&gt; 在 AndroidManifest.xml 中，在 activity 标签添加 &lt;activity android:name=&#34;.MainActivity&#34; android:theme=&#34;@style/BoxButtonTheme&#34;&gt; 这样以后，在 .MainActivity 下的所有控件都会使用 BoxButtontheme 主题中定义的样式 同理，在 application 标签添加主题，旗下的 activity 都会使用该主题 ]]></description>
</item>
<item>
    <title>ViewPager 简单使用</title>
    <link>http://example.org/posts/2022/07/viewpager/</link>
    <pubDate>Sat, 02 Jul 2022 14:37:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/viewpager/</guid>
    <description><![CDATA[ViewPager ViewPager 简单来说就是一个能滑动切换视图的控件，由一个 Activity 包裹，总体结构是 Activity adapter fragment fragment fragment 其中 Activity 通过 adapter 来操作 fragment 显示 Activity 布局 activity_pageview.xml &lt;RelativeLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; xmlns:tools=&#34;http://schemas.android.com/tools&#34; android:layout_width=&#34;match_parent&#34; android:layout_height=&#34;match_parent&#34; &gt; &lt;androidx.viewpager.widget.ViewPager android:id=&#34;@+id/viewpager&#34; android:layout_width=&#34;fill_parent&#34; android:layout_height=&#34;fill_parent&#34; /&gt; &lt;/RelativeLayout&gt; PageViewActivity.java public class PageViewActivity extends FragmentActivity { MyPageAdapter pageAdapter; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_page_view); List&lt;Fragment&gt; fragments = getFragments(); pageAdapter = new MyPageAdapter(getSupportFragmentManager(), fragments); ViewPager pager = (ViewPager) findViewById(R.id.viewpager); pager.setAdapter(pageAdapter); } private List&lt;Fragment&gt; getFragments() { List&lt;Fragment&gt; fList = new ArrayList&lt;Fragment&gt;(); fList.]]></description>
</item>
<item>
    <title>Android Fragment 简单使用</title>
    <link>http://example.org/posts/2022/07/fragment/</link>
    <pubDate>Sat, 02 Jul 2022 14:36:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/fragment/</guid>
    <description><![CDATA[Fragment 这篇笔记大部分参考自 这篇教程 什么是 Fragment Fragment 是 Activity 界面中的一部分，可理解为模块化的 Activity Fragment 不能独立存在，必须嵌入到 Activity 中 Fragment 具有自己的生命周期，接收它自己的事件，并可以在 Activity 运行时被添加或删除 Fragment 的生命周期直接受所在的Activity的影响。如：当 Activity 暂停时，它拥有的所有 Fragment 们都暂停 Fragment 有什么用 支持动态，灵活的界面设计 如何使用 Fragment 相关回调 onAttach 方法 Fragment和Activity建立关联的时候调用（获得activity的传递的值） onCreateView 方法 为Fragment创建视图（加载布局）时调用（给当前的fragment绘制UI布局，可以使用线程更新UI） onActivityCreated 方法 当Activity中的onCreate方法执行完后调用（表示activity执行oncreate方法完成了的时候会调用此方法） onDestroyView 方法 Fragment中的布局被移除时调用（表示fragment销毁相关联的UI布局） onDetach 方法 Fragment和Activity解除关联的时候调用（脱离activity） 静态添加 Fragment 首先需要创建一个 fragment 类，并为其创建布局文件 example_fragment.xml ，再将其配置到 activity_main.xml 中 example_fragment.xml 布局文件 &lt;LinearLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; xmlns:tools=&#34;http://schemas.android.com/tools&#34; android:layout_width=&#34;match_parent&#34; android:layout_height=&#34;match_parent&#34; android:orientation=&#34;vertical&#34; &gt; &lt;TextView android:text=&#34;@string/example_fragment&#34; android:layout_width=&#34;wrap_content&#34; android:layout_height=&#34;wrap_content&#34;/&gt; &lt;/LinearLayout&gt; FragmentLayoutTest.java 类文件 public class FragmentLayoutTest extends Fragment { @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.]]></description>
</item>
</channel>
</rss>
