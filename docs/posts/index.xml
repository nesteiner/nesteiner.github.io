<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - My New Hugo Site</title>
        <link>http://example.org/posts/</link>
        <description>All Posts | My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 02 Jul 2022 14:39:00 &#43;0800</lastBuildDate><atom:link href="http://example.org/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Android 数据绑定简单使用</title>
    <link>http://example.org/posts/2022/07/android-databinding/</link>
    <pubDate>Sat, 02 Jul 2022 14:39:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/android-databinding/</guid>
    <description><![CDATA[Android 数据绑定简单使用 这次我们要替代获取控件的方法，以前是使用 findViewById 一个一个拿到控件 现在我们需要直接在 layout 中注入数据对象，我们还要直接通过 id 访问到控件 数据绑定 启用数据绑定 在 build.gradle 中添加如下代码 android { dataBinding { enable = true } } 即可开启数据绑定 修改布局文件 先看 Vue 中的数据绑定是怎样操作的 &lt;template&gt; &lt;div class=&#34;container&#34;&gt; &lt;span&gt; {{data}} &lt;/span&gt; &lt;/div&gt; &lt;/template&gt; &lt;script lang=&#34;ts&#34; setup&gt; const data = &#39;hello&#39; &lt;/script&gt; 在 XML 中 layout 类似 template 使用 data 标签声明数据 假设有数据类型 User public class User { public String name; public String password; public User(String name, String password) { this.]]></description>
</item>
<item>
    <title>Android 通信简单应用</title>
    <link>http://example.org/posts/2022/07/android-communication/</link>
    <pubDate>Sat, 02 Jul 2022 14:39:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/android-communication/</guid>
    <description><![CDATA[Activity 之间通信 从一个 Activity 跳转到另一个 Activity 时，可以携带一些数据进去，这个就是 Activity 之间的通信 跳转到 Activity 之后可以响应通信，不过需要发起端调用 startActivityForResult ，接收端调用 setResult 这种通信方法我不能类比到组件之间的通信，组件之间通信都是单向数据流，这个是 双向数据流 原来的通信方法 通信发起端 跳转需要借助 Intent 对象，指定来源的上下文和目标的类，调用 startActivity 即可 Intent intent = new Intent(this, TargetClass.class); startActivity(intent) 如果需要携带数据，创建一个 Bundle 对象绑定到 Intent 即可 Intent intent = new Intent(this, TargetClass.class); Bundle bundle = new Bundle(); bundle.putString(&#34;message&#34;, &#34;Hello World&#34;); intent.putExtras(bundle); startActivity(intent); 其实也可以不用 Bundle ，直接给 Intent 来添加 通信接收端 跳转到接收端后，使用 getIntent 来获取对端的 Intent 对象，并查看绑定的数据 Intent intent = getIntent(); Bundle bundle = intent.]]></description>
</item>
<item>
    <title>Android Room 简单使用</title>
    <link>http://example.org/posts/2022/07/android-room/</link>
    <pubDate>Sat, 02 Jul 2022 14:38:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/android-room/</guid>
    <description><![CDATA[Android Room 简单使用 说明 这次没有用内置的 SQLite 库，而是直接使用了 Room ，原因之一是 SQLite 在创建数据库的时候出错了，排查不到哪一步出错 二是这个 Room 与 Flutter 中的 floor 框架非常相似，可以无缝迁移 添加依赖 在 src/build.gradle 中 dependencies { def room_version = &#34;2.4.2&#34; implementation &#34;androidx.room:room-runtime:$room_version&#34; annotationProcessor &#34;androidx.room:room-compiler:$room_version&#34; } 配置类 Room 包含三个主要组件 数据库类 数据实体 数据访问对象(DAO) 他们的定义如下 数据实体 @Entity public class User { @PrimaryKey public int uid; @ColumnInfo(name = &#34;first_name&#34;) public String firstName; @ColumnInfo(name = &#34;last_name&#34;) public String lastName; } 数据访问对象 @Dao public interface UserDao { @Query(&#34;SELECT * FROM user&#34;) List&lt;User&gt; getAll(); @Query(&#34;SELECT * FROM user WHERE uid IN (:userIds)&#34;) List&lt;User&gt; loadAllByIds(int[] userIds); @Query(&#34;SELECT * FROM user WHERE first_name LIKE :first AND &#34; + &#34;last_name LIKE :last LIMIT 1&#34;) User findByName(String first, String last); @Insert void insertAll(User.]]></description>
</item>
<item>
    <title>Android ToolBar 简单使用</title>
    <link>http://example.org/posts/2022/07/android-toolbar/</link>
    <pubDate>Sat, 02 Jul 2022 14:38:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/android-toolbar/</guid>
    <description><![CDATA[Android ToolBar 简单使用 介绍 按照效果图，从左到右分别是 导航栏图标 App Logo 标题 子标题 自定义控件 (Clock) ActionMenu 接下来我们制作这个页面 activity 布局文件 在 layout/activity_toolbar.xml 中 &lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;LinearLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; android:layout_width=&#34;match_parent&#34; android:layout_height=&#34;match_parent&#34; android:orientation=&#34;vertical&#34;&gt; &lt;android.support.v7.widget.Toolbar android:id=&#34;@+id/toolbar&#34; android:layout_width=&#34;match_parent&#34; android:layout_height=&#34;wrap_content&#34; android:background=&#34;@color/color_0176da&#34;&gt; &lt;!--自定义控件--&gt; &lt;TextView android:layout_width=&#34;wrap_content&#34; android:layout_height=&#34;wrap_content&#34; android:text=&#34;Clock&#34; /&gt; &lt;/android.support.v7.widget.Toolbar&gt; &lt;/LinearLayout&gt; menu 菜单文件 在 menu/toolbar_menu.xml 中，这里记得新建 menu 资源文件夹 &lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34;?&gt; &lt;menu xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; xmlns:app=&#34;http://schemas.android.com/apk/res-auto&#34;&gt; &lt;item android:id=&#34;@id/action_search&#34; android:icon=&#34;@mipmap/ic_search&#34; android:title=&#34;@string/menu_search&#34; app:showAsAction=&#34;ifRoom&#34; /&gt; &lt;item android:id=&#34;@id/action_notification&#34; android:icon=&#34;@mipmap/ic_notifications&#34; android:title=&#34;@string/menu_notifications&#34; app:showAsAction=&#34;ifRoom&#34; /&gt; &lt;item android:id=&#34;@+id/action_item1&#34; android:title=&#34;@string/item_01&#34; app:showAsAction=&#34;never&#34; /&gt; &lt;item android:id=&#34;@+id/action_item2&#34; android:title=&#34;@string/item_02&#34; app:showAsAction=&#34;never&#34; /&gt; &lt;/menu&gt; 这里我们通过设置 showAsAction 来确定 menu item 的位置 ifRoom 如果工具栏由剩余空间，那么显示在工具栏中 never 显示在菜单弹出框中 设置 activity 的 ToolbarActivity 在 ToolbarActivity.]]></description>
</item>
<item>
    <title>Android 样式与主题</title>
    <link>http://example.org/posts/2022/07/android-theme/</link>
    <pubDate>Sat, 02 Jul 2022 14:37:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/android-theme/</guid>
    <description><![CDATA[Android 样式与主题 设置样式 假设我们给一个按钮设置样式，在 res/values/style.xml 中 &lt;style name=&#34;BeatBoxButton&#34;&gt; &lt;item name=&#34;android:background&#34;&gt;@color/dark_blue&lt;/item&gt; &lt;/style&gt; 在需要设置的按钮布局中 &lt;Button style=&#34;@style/BeatBoxButton&#34;/&gt; 这样就完成了样式的设置 继承样式 样式支持继承，我们来继承上面的样式，创建一个新的样式 &lt;style name=&#34;BeatBoxButton.Strong&#34;&gt; &lt;item name=&#34;android:textStyle&#34;&gt;bold&lt;/item&gt; &lt;/style&gt; 也可以使用 &lt;style name=&#34;StrongBeatBoxButton&#34; parent=&#34;@style/BeatBoxButton&#34;&gt; &lt;item name=&#34;android:textStyle&#34;&gt;bold&lt;/item&gt; &lt;/style&gt; 使用主题 主题也是一种样式，他必须继承自 Theme 下的主题，这里定义一个 style &lt;style name=&#34;BoxButtonTheme&#34; parent=&#34;Theme.MaterialComponents.DayNight.DarkActionBar&#34;&gt; &lt;item name=&#34;android:background&#34;&gt;@color/black&lt;/item&gt; &lt;item name=&#34;android:textColor&#34;&gt;@color/white&lt;/item&gt; &lt;item name=&#34;android:textStyle&#34;&gt;bold&lt;/item&gt; &lt;/style&gt; 在 AndroidManifest.xml 中，在 activity 标签添加 &lt;activity android:name=&#34;.MainActivity&#34; android:theme=&#34;@style/BoxButtonTheme&#34;&gt; 这样以后，在 .MainActivity 下的所有控件都会使用 BoxButtontheme 主题中定义的样式 同理，在 application 标签添加主题，旗下的 activity 都会使用该主题 ]]></description>
</item>
<item>
    <title>ViewPager 简单使用</title>
    <link>http://example.org/posts/2022/07/viewpager/</link>
    <pubDate>Sat, 02 Jul 2022 14:37:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/viewpager/</guid>
    <description><![CDATA[ViewPager ViewPager 简单来说就是一个能滑动切换视图的控件，由一个 Activity 包裹，总体结构是 Activity adapter fragment fragment fragment 其中 Activity 通过 adapter 来操作 fragment 显示 Activity 布局 activity_pageview.xml &lt;RelativeLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; xmlns:tools=&#34;http://schemas.android.com/tools&#34; android:layout_width=&#34;match_parent&#34; android:layout_height=&#34;match_parent&#34; &gt; &lt;androidx.viewpager.widget.ViewPager android:id=&#34;@+id/viewpager&#34; android:layout_width=&#34;fill_parent&#34; android:layout_height=&#34;fill_parent&#34; /&gt; &lt;/RelativeLayout&gt; PageViewActivity.java public class PageViewActivity extends FragmentActivity { MyPageAdapter pageAdapter; @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_page_view); List&lt;Fragment&gt; fragments = getFragments(); pageAdapter = new MyPageAdapter(getSupportFragmentManager(), fragments); ViewPager pager = (ViewPager) findViewById(R.id.viewpager); pager.setAdapter(pageAdapter); } private List&lt;Fragment&gt; getFragments() { List&lt;Fragment&gt; fList = new ArrayList&lt;Fragment&gt;(); fList.]]></description>
</item>
<item>
    <title>Android Fragment 简单使用</title>
    <link>http://example.org/posts/2022/07/fragment/</link>
    <pubDate>Sat, 02 Jul 2022 14:36:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/fragment/</guid>
    <description><![CDATA[Fragment 这篇笔记大部分参考自 这篇教程 什么是 Fragment Fragment 是 Activity 界面中的一部分，可理解为模块化的 Activity Fragment 不能独立存在，必须嵌入到 Activity 中 Fragment 具有自己的生命周期，接收它自己的事件，并可以在 Activity 运行时被添加或删除 Fragment 的生命周期直接受所在的Activity的影响。如：当 Activity 暂停时，它拥有的所有 Fragment 们都暂停 Fragment 有什么用 支持动态，灵活的界面设计 如何使用 Fragment 相关回调 onAttach 方法 Fragment和Activity建立关联的时候调用（获得activity的传递的值） onCreateView 方法 为Fragment创建视图（加载布局）时调用（给当前的fragment绘制UI布局，可以使用线程更新UI） onActivityCreated 方法 当Activity中的onCreate方法执行完后调用（表示activity执行oncreate方法完成了的时候会调用此方法） onDestroyView 方法 Fragment中的布局被移除时调用（表示fragment销毁相关联的UI布局） onDetach 方法 Fragment和Activity解除关联的时候调用（脱离activity） 静态添加 Fragment 首先需要创建一个 fragment 类，并为其创建布局文件 example_fragment.xml ，再将其配置到 activity_main.xml 中 example_fragment.xml 布局文件 &lt;LinearLayout xmlns:android=&#34;http://schemas.android.com/apk/res/android&#34; xmlns:tools=&#34;http://schemas.android.com/tools&#34; android:layout_width=&#34;match_parent&#34; android:layout_height=&#34;match_parent&#34; android:orientation=&#34;vertical&#34; &gt; &lt;TextView android:text=&#34;@string/example_fragment&#34; android:layout_width=&#34;wrap_content&#34; android:layout_height=&#34;wrap_content&#34;/&gt; &lt;/LinearLayout&gt; FragmentLayoutTest.java 类文件 public class FragmentLayoutTest extends Fragment { @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.]]></description>
</item>
<item>
    <title>RecyclerView 简单使用</title>
    <link>http://example.org/posts/2022/07/recycler-view/</link>
    <pubDate>Sat, 02 Jul 2022 14:36:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/recycler-view/</guid>
    <description><![CDATA[RecyclerView 这个 View 的使用当初我用的不是很明白，现在有点懂了，我们自顶向下设计 View 代码总览 在 MainActivity 中， @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerview); List&lt;Integer&gt; data = Stream.iterate(1, n -&gt; n + 1).limit(100).collect(Collectors.toList()); CustomAdapter adapter = new CustomAdapter(data); RecyclerView.LayoutManager layoutManager = new GridLayoutManager(this, 4); recyclerView.setAdapter(adapter); recyclerView.setLayoutManager(layoutManager); } 我们 定义了一个 RecyclerView 定义了一个 CustomAdapter 为 CustomAdapter 提供了数据 为 RecyclerView 设置 adapter 为 RecyclerView 设置 layoutmanager 注意，这里我们没用到 ViewHolder 这个东西，这个东西由 Adapter 操纵，相当于 RecyclerView Adapter ViewHolder ViewHolder ViewHolder ViewHolder 有关Adapter 定义 Adapter 需要继承 RecyclerView.]]></description>
</item>
<item>
    <title>MLJFlux 简单使用</title>
    <link>http://example.org/posts/2022/07/mljflux/</link>
    <pubDate>Sat, 02 Jul 2022 14:33:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/mljflux/</guid>
    <description><![CDATA[介绍 MLJFlux 就是 MLJ 框架对 Flux 的封装，由于我学不会 Flux ，所以我就退而求其次，学别人装好的工具 同学们可以参照这个 PlayGround 来学习 MLJFlux 其中 features 表示特征 hidden layers 表示隐藏层 learning rate 设置学习率 activation 设置每个神经元的激活函数 regularzation 设置正则化方法 regularzation rate 设置正则化惩罚力度 但在 MLJ 和 MLJFlux 中，你是找不到任何有关学习率的参数设置的，因为已经有方法可以不设置学习率了，具体参考这篇文章 在 MLJFlux 中，有以下几种模型 model type prediction type scitype(x) &lt;: _ scitype(y) &lt;: _ NeuralNetworkRegressor Deterministic Tale{Continuous} with n_in columns AbstractVectir{&lt;:Continuous} n_out = 1 MultitargetNeuralNetworkRegressor Deterministic Table{Continuous} with n_in columns &lt;: Table(Continuous) with n_out columns NeuralNetworkClassifier Probabilistic &lt;:Table(Continuous) with n_in columns AbstractVector{&lt;:Finite} with n_out classes ImageClassifier Probabilistic AbstractVector(&lt;:Image{W,H}) with n_in = (W, H) AbstractVector{&lt;:Finite} with n_out classes 他们的参数有 builder : Default = MLJFlux.]]></description>
</item>
<item>
    <title>有监督回归</title>
    <link>http://example.org/posts/2022/07/julia-regressor/</link>
    <pubDate>Sat, 02 Jul 2022 14:33:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/07/julia-regressor/</guid>
    <description><![CDATA[算法介绍 这里简要介绍下各算法和他们之间的关系，详细理解请百度一下 基本算法 最小二乘法是众多机器学习算法中极为重要的一种基础算法 单纯的最小二乘法对于包含噪声的学习过程经常有过拟合的弱点，这往往是由于学习模型对于训练样本而言过于复杂 l2 约束 由此，引入带有约束条件的最小二乘法 &mdash;- Ridge 回归 带有约束条件的最小二乘法和交叉验证法的组合，在实际应用中是非常有效的回归方法 然而，当参数特别多的时候，求解各参数以及学习得到的函数的输出值的过程，都需要耗费大量的时间 l1 约束 由此，引入可以吧大部分参数都置为0的稀疏学习算法 因为大部分参数都变成了0，所以就可以快速地求解各参数以及学习得到的函数的输出值 l1 + l2 约束 虽然 l1 约束的最小二乘学习法是非常有用的学习方法，但是在实际应用中，经常会遇到些许限制 在 Lasso 回归求解路径中，对于 N×P 的设计矩阵来说，最多只能选出 min(N,p) 个变量 当 p&gt;N 的时候，最多只能选出N个预测变量．因此，对于 p∼N 的情况，Lasso方法不能够很好的选出真实的模型． 如果预测变量具有群组效应，则用Lasso回 归时，只能选出其中的一个预测变量 对于通常的 N&gt;P 的情形，如果预测变量中 存在很强的共线性，Lasso的预测表现受控于岭回归 基于以上几点Lasso回归的局限性，Zou和 Hastie在2005年提出了弹性网回归方法，回归系 数表达式为 \(\hat \beta^{ridge} =\mathop{\arg\min}_{\beta} \{\sum \limits _{i=1}^{N}(y_i-\beta_0-\sum\limits_{j=1}^px_{ij}\beta_j)^2+\lambda\sum \limits_{j=1}^{p}|\beta_{j}|+\lambda\sum \limits_{j=1}^{p}\beta_{j}^2\}\) MLJLinearModels 使用 Ridge \(J = \frac{1}{n}\sum_{i = 1}^n (f( x_i) - y_i)^2 + \lambda \|w\|_2^2\tag{1}\) RidgeRegressor RidgeRegression() RidgeRegression(λ; lambda, fit_intercept, penalize_intercept, scale_penalty_with_samples) Lasso \(J = \frac{1}{n}\sum_{i = 1}^n (f( x_i) - y_i)^2 + \lambda \|w\|_1\tag{2}\) LassoRegressor LassoRegression() LassoRegression(λ; lambda, fit_intercept, penalize_intercept, scale_penalty_with_samples) Elastic-Net \(\smash{\min_{w}}\sum_{i=1}^m(y_i-\sum_{j=1}^dx_{ij}w_j)^2 + \lambda\sum_{j=1}^d|w_j|+\lambda \sum_{j=1}^dw_j^2 \tag{3}\) ElasticNetRegression ElasticNetRegression() ElasticNetRegression(λ) ElasticNetRegression(λ, γ; lambda, gamma, fit_intercept, penalize_intercept, scale_penalty_with_samples) 说明 其实可以不用管 fit_intercept penalize_intercept 我也不知道这两个是干什么的，就先别管他们了 总之，只用设置 lambda 就行了 实例 波士顿房价预测 数据准备 竞赛数据来自 https://www.]]></description>
</item>
</channel>
</rss>
