<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>My New Hugo Site</title>
        <link>http://example.org/</link>
        <description>This is my cool site</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 06 Feb 2023 20:05:00 &#43;0800</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>创建一个时钟组件</title>
    <link>http://example.org/posts/2023/02/flutter-clock/</link>
    <pubDate>Mon, 06 Feb 2023 20:05:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2023/02/flutter-clock/</guid>
    <description><![CDATA[指针绘制 给定时，分，秒，绘制出指针在表盘上的位置 时针 给定 时，分 class HourHand extends CustomPainter { int hours; int minutes; final Paint painter; // 1 HourHand({ required this.hours, required this.minutes }): painter = Paint() ..color = Colors.black ..strokeWidth = 20 ..style = PaintingStyle.stroke; @override void paint(Canvas canvas, Size size) { final radius = size.width / 2; // 2 canvas.save(); // 3 canvas.translate(radius, radius); // 4 canvas.rotate(hours &gt;= 12 ? 2 * pi * ((hours - 12) / 12 + minutes / 720) : 2 * pi * (hours / 12 + minutes / 720)); // 5 Path path = Path(); path.]]></description>
</item>
<item>
    <title>[Note] Spring Data JPA 笔记</title>
    <link>http://example.org/posts/2023/01/note-spring-data-jpa/</link>
    <pubDate>Mon, 23 Jan 2023 19:30:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2023/01/note-spring-data-jpa/</guid>
    <description><![CDATA[引入依赖 简单查询 预生成方法 自定义简单查询 属性查询 组合查询 自定义SQL查询 HQL SQL 修改和删除 @Modifying @Transactional CANCEL 已命名查询 定义命名查询 调用命名查询 运行验证 复杂查询 分页查询 pageable 排序和限制 动态条件查询 @Test fun testSpecification() { userRepository.deleteAll() val users = listOf&lt;User&gt;( User(null, &#34;hello&#34;, 1), User(null, &#34;world&#34;, 2), User(null, &#34;holy&#34;, 3), User(null, &#34;shit&#34;, 4) ) userRepository.saveAll(users) val matchUsers = userRepository.findAll { root, query, criteriaBuilder -&gt; val p1 = criteriaBuilder.like(root.get(&#34;name&#34;), &#34;w%&#34;) val p2 = criteriaBuilder.greaterThan(root.get(&#34;age&#34;), 0) criteriaBuilder.and(p1, p2) } matchUsers.forEach { println(it.]]></description>
</item>
<item>
    <title>Flutter 局部更新</title>
    <link>http://example.org/posts/2023/01/flutter-partial-update/</link>
    <pubDate>Sun, 08 Jan 2023 15:09:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2023/01/flutter-partial-update/</guid>
    <description><![CDATA[Flutter 局部更新 StatefulBuilder Widget build(BuildContext context) { return Column( children: [ buildCheapUpdateWidget(context), buildExpensiveUpdateWidget(context) ] ) } 在上述代码中，如果调用了 setState 更新状态，整个组件会重新 build 一遍，届时 buildExpensiveUpdateWidget 会 重新调用一遍，这是我们引入局部更新组建 StatefulBuilder( builder: (context, setState) =&gt; Widget ) 更新时用 builder 中的 setState 即可 正是有了局部更新，我们可以解决在 Dialog 中 setState 不起作用的问题，详情看 这篇文章 Selector Selector 是另一种状态管理方式 Provider 的局部更新方法 在使用 Consumer 的时候，如果 ChangeNotifier 调用了 notifyListeners ，所有监听的 Consumer 都会更新， 但是没那个必要，所以我们引入局部更新来避免不必要的更新 Selector&lt;State, T&gt;( selector: (context, state) =&gt; state.value, builder: (context, value, child) =&gt; Widget ) 注意 目前的理解，需要搭配 context.]]></description>
</item>
<item>
    <title>SprintBoot with Redis 简单使用</title>
    <link>http://example.org/posts/2023/01/spring-data-redis/</link>
    <pubDate>Thu, 05 Jan 2023 17:28:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2023/01/spring-data-redis/</guid>
    <description><![CDATA[SprintBoot with Redis 简单使用 定义 redisTemplate @Configuration class RedisConfigure { @Bean fun redisTemplate(connectionFactory: LettuceConnectionFactory): RedisTemplate&lt;String, User&gt; { val redisTemplate = RedisTemplate&lt;String, User&gt;(); redisTemplate.keySerializer = StringRedisSerializer() redisTemplate.valueSerializer = GenericJackson2JsonRedisSerializer() redisTemplate.setConnectionFactory(connectionFactory) return redisTemplate } } 定义数据类型 class User( val id: Long, val name: String, val sex: String, ) { constructor() : this(0L, &#34;&#34;, &#34;man&#34;) } 操作 @SpringBootTest class SpringbootRedisApplicationTests { @Autowired lateinit var redisTemplate: RedisTemplate&lt;String, User&gt; @Test fun testSerializable() { val user = User(1L, &#34;hello&#34;, &#34;man&#34;) val ops = redisTemplate.]]></description>
</item>
<item>
    <title>SpringBoot with MongodbRepository</title>
    <link>http://example.org/posts/2023/01/spring-data-mongodb/</link>
    <pubDate>Thu, 05 Jan 2023 00:19:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2023/01/spring-data-mongodb/</guid>
    <description><![CDATA[Spring with MongodbRepository 简单使用 这篇笔记参考自 这篇文章 定义数据类型 class Product( val id: String, val name: String, val price: Int ) 我们可以 手动定义对象存储的集合位置 @Document(collection = &#34;products&#34;) class Product( ) 手动定义对象的主键 class Product( @MongoId val id: String ) 定义 Repository @Repository interface ProductRepository: MongoRepository&lt;Product, String&gt; { fun findAllByNameLike(name: String): List&lt;Product&gt; fun findById(id: String): Product? fun existsByName(name: String): Bool } 继承自 MongoRepository 的接口类与 JPA 相似，定义好方法即可， CRUD 方法也与之类似 排序 @Repository interface ProductRepository: MongoRepository&lt;Product, String&gt; { fun findAllByNameLike(name: String, sort: Sort): List&lt;Product&gt; } val sort = Sort.]]></description>
</item>
<item>
    <title>Rust Mongodb 简单使用</title>
    <link>http://example.org/posts/2023/01/rust-mongodb/</link>
    <pubDate>Sun, 01 Jan 2023 12:28:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2023/01/rust-mongodb/</guid>
    <description><![CDATA[Rust Mongodb 开启同步和异步 同步 mongodb = {version = &#34;2.3.1&#34;, features = [&#34;tokio-sync&#34;]} use mongodb::sync::{Client, Collection}; 异步 mongodb = {version = &#34;2.3.1&#34;} use mongodb::{Client, Collection}; 连接 Mongodb impl Client { pub fn with_uri_str(url: impl AsRef&lt;str&gt;) -&gt; Result&lt;Self&gt; } impl Client { pub async fn with_uri_str(url: impl AsRef&lt;str&gt;) -&gt; Result&lt;Self&gt; } 连接到 database impl Client { pub fn database(&amp;self, name: &amp;str) -&gt; Database } 连接到 collection impl Database { pub fn collection&lt;T&gt;(&amp;self, name: &amp;str) -&gt; Collection&lt;T&gt; } collection 操作 异步和同步代码就差一个 await 操作，这里以同步代码为例 find 方法定义]]></description>
</item>
<item>
    <title>Rust Scraper 简单使用</title>
    <link>http://example.org/posts/2022/12/rust-scraper/</link>
    <pubDate>Fri, 30 Dec 2022 23:34:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/12/rust-scraper/</guid>
    <description><![CDATA[Rust Scraper 从一段代码开始看起 fn main() { let response = reqwest::blocking::get( &#34;https://meitulu.me/item/4756.html&#34; ) .unwrap() .text() .unwrap(); let document = scraper::Html::parse_document(&amp;response); let image_selector = scraper::Selector::parse(&#34;div.mb-4.container-inner-fix-m img&#34;).unwrap(); let images = document.select(&amp;image_selector); images.for_each(|x| println!(&#34;{:?}&#34;, x.value().attr(&#34;src&#34;))); } 取得 html 文本 获取 document 对象 设置 selector 使用 document 解析 selector , 得到 ElementRef 结构体 对 ElementRef 进行操作 其中 document.select 返回一个数组 ElementRef ElementRef 又一个 value 方法 pub fn value(&amp;self) -&gt; &amp;&#39;a Element 而 Element 又是 pub struct Element { pub name: QualName, pub id: Option&lt;LocalName&gt;, pub classes: HashSet&lt;LocalName&gt;, pub attrs: Attributes, } 他有方法 pub fn attr(&amp;self, attr: &amp;str) -&gt; Option&lt;&amp;str&gt; 可以获取节点的属性值 当然，你如果想获取节点内部的文字信息，可以对 ElementRef 使用 pub fn inner_html(&amp;self) -&gt; String 美女爬虫例子 use std::{fs::File, io::Write}; use std::path::{Path, PathBuf}; use url::Url; const BASE_IMAGE_URL: &amp;str = &#34;https://meitulu.]]></description>
</item>
<item>
    <title>Serde Json 简单使用</title>
    <link>http://example.org/posts/2022/12/rust-serde-json/</link>
    <pubDate>Fri, 30 Dec 2022 17:59:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/12/rust-serde-json/</guid>
    <description><![CDATA[Serde Json 添加依赖 cargo add serde --features derive cargo add serde_json cargo add serde_derive 结构体的序列化与反序列化 use serde::{Serialize, Deserialize}; #[derive(Serialize, Deserialize, Debug)] struct Point { x: i32, y: i32, } fn main() { let point = Point {x: 1, y: 2}; let json: String = serde_json::to_string(&amp;point).unwrap(); println!(&#34;{}&#34;, json); let point: Point = serde_json::from_str(&amp;json).unwrap(); println!(&#34;{:#?}&#34;, point); } 枚举的序列化与反序列化 第一种枚举类型 参照结构体的序列化和反序列化，如果对一个枚举进行序列化，我们发现 use serde::{Serialize, Deserialize}; #[derive(Debug, Serialize, Deserialize)] enum Week { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday, } fn main() { let json: String = serde_json::to_string(&amp;Week::Friday).]]></description>
</item>
<item>
    <title>Clap 简单使用</title>
    <link>http://example.org/posts/2022/12/rust-clap/</link>
    <pubDate>Fri, 23 Dec 2022 16:33:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/12/rust-clap/</guid>
    <description><![CDATA[添加参数 Basic 以 myapp run app --release --message hello 为例 这里的参数分为几种 run 子命令 app 固定位置参数 --release flag 参数 --message hello 命名选项参数 子命令 use clap::{Parser, Subcommand}; #[derive(Parser)] #[command(author, version, about, long_about = None)] struct Cli { #[command(subcommand)] command: Commands } #[derive(Subcommand)] enum Commands { Add { name: Option&lt;String&gt; } } fn main() { let cli = Cli::parse(); match &amp;cli.command { Commands::Add {name} =&gt; { println!(&#34;myapp add was used, name is: {:?}&#34;, name) } } } 在结构中使用 #[command(subcommand)] 表示以下结构是一个子命令 用 #[derive(Subcommand)] 来声明一个子命令结构 调用的时候，使用 myapp add hello 即可 固定位置参数 use clap::Parser; #[derive(Debug, Parser)] struct Cli { a: u32, b: u32, c: u32, name: String } fn main() { let cli = Cli::parse(); println!]]></description>
</item>
<item>
    <title>Rust 多线程程序和异步程序简单编写</title>
    <link>http://example.org/posts/2022/08/rust-multithread-async/</link>
    <pubDate>Thu, 18 Aug 2022 19:23:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/2022/08/rust-multithread-async/</guid>
    <description><![CDATA[程序介绍 这次我打算把一个 select 多路复用的程序改成多线程版本和异步版本的，他的工作流程如下 从 stdin 读取数据，处理数据 从 socket 读取数据，处理数据 而多线程和异步版本的工作流程则是 创建数据通道 channel 创建一个 线程/Future, 从 stdin 读取数据，将数据写入 channel 创建一个 线程/Future, 从 socket 读取数据，将数据写入 channel 创建一个 线程/Future, 从 channel 读取数据，处理数据 我们马上来做一下看吧 多线程程序 从 socket 读取数据的线程 let thread1 = thread::spawn(move || { loop { let (mut stream, _) = server.accept().unwrap(); let mut received = String::new(); if let Err(_) = stream.read_to_string(&amp;mut received) { eprintln!(&#34;recv error occur&#34;); } if let Err(e) = sender1.send(received) { eprintln!]]></description>
</item>
</channel>
</rss>
